# -*- coding: utf-8 -*-
"""Finalyearproject.ipynb

Automatically generated by Colab.


"""

!pip install -q -U google-generativeai gradio groq

import google.generativeai as genai
from google.colab import userdata
import gradio as gr
from IPython.display import Image
import os
from groq import Groq

client = Groq(
    api_key=userdata.get('GROQ_API_KEY'),
)

# If using a stored API key from Google Colab:
api_key = userdata.get('GOOGLE_API_KEY')
genai.configure(api_key=api_key)

# If using an environment variable:
# genai.configure(api_key=os.environ["API_KEY"])

model = genai.GenerativeModel('models/gemini-1.5-pro-001')

def extract_text_from_image(image_path):
  img_ = Image(image_path)
  prompt='analyze and extract all text information from image,it is usually an answer script'
  result=model.generate_content([img_,prompt])
  return result.text

def evaluate_answer(extracted_text):
  chat_completion = client.chat.completions.create(
      messages=[
          {
              "role": "user",
              "content": 'In the following text,do three tasks,check whether its keywords are relevant and give it a score from 1-100, check whether its semantically similar in meaning to a good answer by a good student,also give it a score from 1 to 100 and finally rate its grammar from 1-100, respond only with the numerical scores (keyword,semantic,grammar in order) not separated by commas,only the numbers no other words'+extracted_text,
          }
      ],
      model="llama3-70b-8192",
  )

  text12 =(chat_completion.choices[0].message.content)
  score=text12.split()

  grammar_weight = 0.2
  keyword_weight=0.2
  semantic_weight =0.6
  keywordscore = int(score[0])
  Semanticscore = int(score[1])
  Grammarscore = int(score[2])

  weighted_grade = (Grammarscore * grammar_weight+ keywordscore* keyword_weight+ Semanticscore * semantic_weight)
  return keywordscore,Semanticscore,Grammarscore,weighted_grade

def give_feedback(extracted_text,keywordscore,Semanticscore,Grammarscore, weighted_grade):
  chat_completion = client.chat.completions.create(
      messages=[
          {
              "role": "user",
              "content": 'For the following text, you need to provide feedback on how they can improve their answers'+extracted_text,
          }
      ],
      model="llama3-70b-8192",
  )

  text13 =(chat_completion.choices[0].message.content)
  return text13

def integration_function(image_path):
  extracted_text = extract_text_from_image(image_path)
  Final_grade = evaluate_answer(extracted_text)
  keywordscore, Semanticscore, Grammarscore, weighted_grade = Final_grade
  Feedback_Text = give_feedback(extracted_text,keywordscore,Semanticscore,Grammarscore, weighted_grade)
  return extracted_text,keywordscore,Semanticscore,Grammarscore, weighted_grade,Feedback_Text

from google.colab import drive
drive.mount('/content/drive')

image_path = '/content/maxresdefault.jpg'
extracted_text,keywordscore,Semanticscore,Grammarscore,weighted_grade,Feedback_Text = integration_function(image_path)
print("Extracted Text:", extracted_text)
print("Keyword Score:",keywordscore)
print("Semantic Score:",Semanticscore)
print("Grammar Score:",Grammarscore)
print("Final Grade:",weighted_grade)
print("Feedback Text:",Feedback_Text)

iface = gr.Interface(
    fn=integration_function,  # Use the combined function
    inputs=gr.Image(type="filepath"),
    outputs=[
        gr.Textbox(label="Extracted Text"),
        gr.Number(label="Keyword Score"),
        gr.Number(label="Semantic Score"),
        gr.Number(label="Grammar Score"),
        gr.Number(label="Final Grade"),
        gr.Textbox(label="Feedback_Text")
    ],
    title="AI-Powered Handwritten Answer Evaluator",  # Add a title
    description="Upload an image of your handwritten answer to get feedback and a grade."  # Add a description
)

iface.launch(debug=True)